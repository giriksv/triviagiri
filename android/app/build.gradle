plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode") ?: "1"
def flutterVersionName = localProperties.getProperty("flutter.versionName") ?: "1.0"

android {
    namespace = "com.zealtown.authentication.authentication"
    compileSdkVersion 34 // Set the latest compile SDK version
    ndkVersion "23.1.7779620" // Set your NDK version or remove if not using NDK

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.zealtown.authentication.authentication"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }
    signingConfigs {
        release {
            keyAlias 'keyalias'
            keyPassword 'Zt@2002'
            storeFile file('D:/authentication/android/release-key.jks')
            storePassword 'Zt@2002'
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.debug // Update this for release build
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'


        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:33.3.0')
    implementation 'com.google.firebase:firebase-storage' // added
    implementation 'com.google.firebase:firebase-analytics'
    // Add other Firebase dependencies as needed
}
afterEvaluate {
    tasks.matching { it.name == "mapDebugSourceSetPaths" }.configureEach {
        dependsOn ":app:processDebugGoogleServices"
    }
}
